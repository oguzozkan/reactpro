{"version":3,"sources":["About.js","Nav.js","Creative.js","MyForm.js","zip_js.js","Tempcond.js","screen.js","backGround.js","Form.js","Fileinput.js","App.js","serviceWorker.js","index.js","firewall.jpg"],"names":["About","className","Nav","Creative","useEffect","fetchItems","useState","setItems","a","fetch","data","json","items","console","log","MyForm","props","myChangeHandler","event","nam","target","name","val","value","setState","submit","js_text","replace","state","condition","temp","this","type","placeholder","onChange","React","Component","ReactDOM","render","document","getElementById","Tempcond","e","useRadioButtons","platformValue","plaftormInputProps","checked","rootElement","Screen","screenValue","screenInputProps","back","Header","src","style","opacity","alt","Form","onSubmit","getInfo","Fileinput","handleSubmit","bind","fileInput","createRef","preventDefault","alert","current","files","ref","animatedComponents","makeAnimated","Weathers","label","App","path","component","options","components","isMulti","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"wKAWeA,MARf,WACE,OACE,yBAAKC,UAAU,SACd,uCCYUC,MAff,WACE,OAEE,6BAEJ,wBAAID,UAAU,UAAd,WACA,wBAAIA,UAAU,gB,iCCqBCE,MA1Bf,WACCC,qBAAU,WAEXC,MAEG,IALiB,MAMGC,mBAAS,IANZ,mBAMPC,GANO,WAQbF,EAAU,uCAAG,8BAAAG,EAAA,sEACDC,MACnB,4CAFoB,cACdC,EADc,gBAGAA,EAAKC,OAHL,OAGdC,EAHc,OAIpBC,QAAQC,IAAIF,GACZL,EAASK,GALW,2CAAH,qDAWf,OACE,yBAAKX,UAAU,YACd,0C,4DCrBCc,E,YACF,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,gBAAkB,SAACC,GACjB,IAAIC,EAAMD,EAAME,OAAOC,KACnBC,EAAMJ,EAAME,OAAOG,MACvB,EAAKC,SAAL,eAAgBL,EAAMG,KAVL,EAYnBG,OAAS,WAKPC,QCpBY,y7EDoBKC,QAHN,QAGmB,EAAKC,MAAMC,WACzCH,QAASA,QAAQC,QAHL,UAGmB,EAAKC,MAAME,OAhB1C,EAAKF,MAAQ,CACXC,UAAW,GACXC,KAAM,MAJS,E,sEAuBjB,OACE,8BACA,gCAAMC,KAAKH,MAAMC,UAAjB,IAA6BE,KAAKH,MAAME,MAExC,yBAAK7B,UAAU,YACf,2BAEE+B,KAAK,OACLX,KAAK,YACLY,YAAY,sBACZC,SAAUH,KAAKd,mBAGZ,yBAAKhB,UAAU,aAEpB,2BACE+B,KAAK,OACLX,KAAK,OACLY,YAAY,YACZC,SAAUH,KAAKd,wB,GA3CJkB,IAAMC,WAoDzBC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SAEvCzB,QErDf,SAAS0B,IAAY,IAAD,EAgCpB,SAAyBpB,GAAO,IAAD,EACHf,mBAAS,MADN,mBACtBiB,EADsB,KACfC,EADe,KAa7B,MAAO,CAACD,EANW,CACjBF,OACAW,KAAM,QACNE,SAPmB,SAAAQ,GACnBlB,EAASkB,EAAEtB,OAAOG,UAnCwBoB,CAAgB,YAD1C,mBACXC,EADW,KACIC,EADJ,KAGlB,OACE,yBAAK5C,UAAU,YACb,8BACE,4CAEE,yCACEsB,MAAM,UACNuB,QAA2B,YAAlBF,GACLC,IALR,OAQE,yCACEtB,MAAM,OACNuB,QAA2B,SAAlBF,GACLC,IAXR,WAcE,yCACEtB,MAAM,WACNuB,QAA2B,aAAlBF,GACLC,OAyBhB,IAAME,EAAcR,SAASC,eAAe,QAC5CH,IAASC,OAAO,kBAACG,EAAD,MAAcM,GACfN,QClDf,SAASO,IAAU,IAAD,EAyBlB,SAAyB3B,GAAO,IAAD,EACHf,mBAAS,MADN,mBACtBiB,EADsB,KACfC,EADe,KAa7B,MAAO,CAACD,EANW,CACjBF,OACAW,KAAM,QACNE,SAPmB,SAAAQ,GACnBlB,EAASkB,EAAEtB,OAAOG,UA3BoBoB,CAAgB,UAFxC,mBAETM,EAFS,KAEIC,EAFJ,KAGhB,OACE,yBAAKjD,UAAU,YACb,8BACE,4CAEE,yCACEsB,MAAM,UACNuB,QAAyB,YAAhBG,GACLC,IALR,SAQE,yCACE3B,MAAM,SACNuB,QAAyB,WAAhBG,GACLC,OAwBhB,IAAMH,EAAcR,SAASC,eAAe,QAC5CH,IAASC,OAAO,kBAACU,EAAD,MAAYD,GACbC,Q,uBC3CfnC,QAAQC,IAAIqC,KAOGC,MAJf,WAEE,OAAO,yBAAKC,IAAKF,IAAMG,MAAO,CAACC,QAAS,OAAStD,UAAU,SAASuD,IAAI,U,gBCC3DC,G,OARF,SAAAzC,GAAK,OACjB,0BAAM0C,SAAU1C,EAAM2C,SACrB,yBAAK1D,UAAU,UACf,4BAAQA,UAAU,gBAAlB,uB,wBCJI2D,E,YACF,WAAY5C,GAAQ,IAAD,8BACjB,4CAAMA,KACD6C,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,UAAY5B,IAAM6B,YAHN,E,0EAKN9C,GACXA,EAAM+C,iBACNC,MAAM,mBAAD,OAEDnC,KAAKgC,UAAUI,QAAQC,MAAM,GAAG/C,S,+BAMpC,OACE,0BAAMqC,SAAU3B,KAAK8B,cACnB,8CAEE,2BAAO7B,KAAK,OAAOqC,IAAKtC,KAAKgC,aAE/B,6BACA,4BAAQ/B,KAAK,UAAb,e,GAvBcG,IAAMC,WA6B5BC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SAGXoB,QClBXU,EAAqBC,cAErBC,EAAW,CACf,CAAEC,MAAO,QAASlD,MAAO,KACzB,CAAEkD,MAAO,sBAAuBlD,MAAO,IACvC,CAAEkD,MAAO,SAAUlD,MAAO,IAC1B,CAAEkD,MAAO,MAAOlD,MAAO,IACvB,CAAEkD,MAAO,UAAWlD,MAAO,KAC3B,CAAEkD,MAAO,WAAYlD,MAAO,IAC5B,CAAEkD,MAAO,OAAQlD,MAAO,GACxB,CAAEkD,MAAO,OAAQlD,MAAO,IACxB,CAAEkD,MAAO,MAAOlD,MAAO,IACvB,CAAEkD,MAAO,QAASlD,MAAO,KACzB,CAAEkD,MAAO,QAASlD,MAAO,KAyCZmD,MAtCf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKzE,UAAU,OAEnB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO0E,KAAK,SAASC,UAAW5E,IAChC,kBAAC,IAAD,CAAO2E,KAAK,YAAYC,UAAWzE,IACnC,kBAAC,EAAD,MAKA,yBAAKF,UAAU,aACP,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAQ4E,QAASL,EAAUM,WAAYR,EACrCS,SAAO,KAGX,yBAAK9E,UAAU,gBAIrB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCnDgB+E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN/C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmB6C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/E,QAAQ+E,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.9e75bef2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"About\">\r\n     <h1>about</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Nav() {\r\n  return (\r\n    \r\n    <nav>\r\n    \r\n<h3 className='id_tag'>FIREFLY</h3>\r\n<ul className='nav-links'>\r\n   \r\n \r\n</ul>\r\n \r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React , {useState,useEffect}  from 'react';\r\nimport './App.css';\r\n\r\n\r\nfunction Creative() {\r\n useEffect(() =>{\r\n\r\nfetchItems();\r\n\r\n },[]);\r\n const[items,setItems]=useState([]);\r\n\r\n const fetchItems = async () =>{\r\nconst data = await fetch(\r\n'https://api.fortnitetracker.com/v1/store');\r\nconst items = await data.json();\r\nconsole.log(items);\r\nsetItems(items);\r\n\r\n }\r\n \r\n \r\n \r\n  return (\r\n    <div className=\"Creative\">\r\n     <h1>Creative</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Creative;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport {js_text} from './zip_js';\r\nclass MyForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        condition: '',\r\n        temp: null,\r\n      };\r\n    }\r\n    myChangeHandler = (event) => {\r\n      let nam = event.target.name;\r\n      let val = event.target.value;\r\n      this.setState({[nam]: val});\r\n    }\r\n    submit = () => {\r\n      \r\n      var href = \"#var1\";\r\n      var h2ref = \"vartemp\";\r\n      //new_text_var = js_text.replace(href, this.state.condition);\r\n      js_text= js_text.replace(href,this.state.condition);\r\n      js_text= js_text.replace(h2ref,this.state.temp);\r\n\r\n\r\n    }\r\n    render() {\r\n      return (\r\n        <form >\r\n        <h1> {this.state.condition} {this.state.temp}</h1>\r\n     \r\n        <div className='formcond'>\r\n        <input\r\n  \r\n          type='text'\r\n          name='condition'\r\n          placeholder=\"Enter Creative Name\"\r\n          onChange={this.myChangeHandler}\r\n        />\r\n             </div>\r\n             <div className='formcond2'>\r\n     \r\n        <input\r\n          type='text'\r\n          name='temp'\r\n          placeholder=\"Tempature\"\r\n          onChange={this.myChangeHandler}\r\n        />\r\n    </div>\r\n       \r\n        </form>\r\n      );\r\n    }\r\n  }\r\n  \r\n  ReactDOM.render(<MyForm />, document.getElementById('root'));\r\n\r\nexport default MyForm;\r\n","\r\n//[\"$#{var1}\"]\r\nexport let js_text = `\r\n    let weatherState =[\"$#{varcondition}\"];\r\n    let params.current.temperature  = [\"$#{vartemp}\"];\r\n    function loadDynamicContent(ctx) {\r\n        if (window.Firefly && window.Firefly.onDynamicContentLoaded) {\r\n            window.Firefly.onDynamicContentLoaded({});\r\n            setWeatherData(ctx.params);\r\n        }\r\n        return {\r\n            responseCode: 1,\r\n            responseReason: 'OK',\r\n        };\r\n    }\r\n    \r\n    function startDisplay(ctx) {\r\n        console.log('start display');\r\n        console.log(ctx);\r\n        var video = document.getElementById('vid');\r\n        video.play();\r\n        setTimeout(function () { var currentTemperature = document.getElementById('currentTemperature'); currentTemperature.style.color = \"#fff\"; }, 6700);\r\n    }\r\n    \r\n    \r\n    \r\n    function setWeatherData(params) {\r\n    \r\n        if (params && Object.keys(params).length) {\r\n    \r\n            var video = document.getElementById('vid');\r\n            var source = document.createElement('source');\r\n            source.setAttribute('type', \"video/mp4\");\r\n    \r\n            var currentTemperature = document.getElementById('currentTemperature');\r\n            currentTemperature.innerHTML = params.current.temperature + 'Â°';\r\n    \r\n            var weatherState = params.current.iconPhrase;\r\n    \r\n            if (weatherState.includes(\"Showers\") || weatherState.includes(\"Rain\") || weatherState.includes(\"T-Storms\") || weatherState.includes(\"Sleet\")) {\r\n                // RAIN & SOUP\r\n                source.setAttribute('src', \"videos/soup.mp4\");\r\n            }\r\n            else if (weatherState.includes(\"Flurries\") || weatherState.includes(\"Snow\")) {\r\n                // SNOW & RAMEN\r\n                source.setAttribute('src', \"videos/ramen.mp4\");\r\n            }\r\n            else if (params.current.temperature > 31) {\r\n                // NOT COLD & PIZZA\r\n                source.setAttribute('src', \"videos/pizza.mp4\");\r\n            }\r\n            else {\r\n                // COLD & PASTA\r\n                source.setAttribute('src', \"videos/pasta.mp4\");\r\n    \r\n            }\r\n    \r\n            video.appendChild(source);\r\n            var firstLoad = true;\r\n            video.addEventListener(\"play\", function () {\r\n                if (firstLoad) {\r\n                    firstLoad = false;\r\n    \r\n                    video.currentTime = 0.01;\r\n                    video.pause();\r\n                }\r\n            });\r\n    \r\n        }\r\n    }\r\n    `\r\n\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './App.css';\r\n\r\n\r\nfunction Tempcond() {\r\n  const [platformValue, plaftormInputProps] = useRadioButtons(\"platform\");\r\n\r\n  return (\r\n    <div className=\"tempclas\">\r\n      <form>\r\n        <fieldset>\r\n          Greater\r\n          <input\r\n            value=\"greater\"\r\n            checked={platformValue === \"greater\"}\r\n            {...plaftormInputProps}\r\n          />\r\n          Less\r\n          <input\r\n            value=\"less\"\r\n            checked={platformValue === \"less\"}\r\n            {...plaftormInputProps}\r\n          />\r\n          Equality\r\n          <input\r\n            value=\"equality\"\r\n            checked={platformValue === \"equality\"}\r\n            {...plaftormInputProps}\r\n          />\r\n        </fieldset>\r\n      \r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction useRadioButtons(name) {\r\n  const [value, setState] = useState(null);\r\n\r\n  const handleChange = e => {\r\n    setState(e.target.value);\r\n  };\r\n\r\n  const inputProps = {\r\n    name,\r\n    type: \"radio\",\r\n    onChange: handleChange\r\n  };\r\n\r\n  return [value, inputProps];\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<Tempcond />, rootElement);\r\nexport default Tempcond;\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './App.css';\r\n\r\n\r\nfunction Screen() {\r\n \r\n  const [screenValue, screenInputProps] = useRadioButtons(\"screen\");\r\n  return (\r\n    <div className=\"tempclas\">\r\n      <form>\r\n        <fieldset>\r\n          Sunrise\r\n          <input\r\n            value=\"sunrise\"\r\n            checked={screenValue === \"sunrise\"}\r\n            {...screenInputProps}\r\n          />\r\n          Coffin\r\n          <input\r\n            value=\"coffin\"\r\n            checked={screenValue === \"coffin\"}\r\n            {...screenInputProps}\r\n          />\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction useRadioButtons(name) {\r\n  const [value, setState] = useState(null);\r\n\r\n  const handleChange = e => {\r\n    setState(e.target.value);\r\n  };\r\n\r\n  const inputProps = {\r\n    name,\r\n    type: \"radio\",\r\n    onChange: handleChange\r\n  };\r\n\r\n  return [value, inputProps];\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<Screen />, rootElement);\r\nexport default Screen;\r\n","\r\nimport React from 'react';\r\nimport back from './firewall.jpg'; \r\nimport './App.css';\r\nimport { render } from '@testing-library/react';\r\nconsole.log(back); // /logo.84287d09.png\r\n\r\n\r\nfunction Header() {\r\n \r\n  return <img src={back} style={{opacity: '0.4'} } className=\"class1\" alt=\"back\" />;\r\n}\r\nexport default Header;\r\n\r\n","import React from \"react\";\r\nimport './App.css';\r\n\r\nconst Form = props => (\r\n\t<form onSubmit={props.getInfo}>\r\n\t\t<div className='butdiv'>\r\n\t\t<button className='createbutton'>Create Creative</button>\r\n\t\t</div>\r\n\t</form>\r\n);\r\n\r\nexport default Form;","import React from'React';\r\nimport ReactDOM from 'react-dom';\r\nclass Fileinput extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.fileInput = React.createRef();\r\n    }\r\n    handleSubmit(event) {\r\n      event.preventDefault();\r\n      alert(\r\n        `Selected file - ${\r\n          this.fileInput.current.files[0].name\r\n        }`\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Upload file:\r\n            <input type=\"file\" ref={this.fileInput} />\r\n          </label>\r\n          <br />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n  \r\n  ReactDOM.render(\r\n    <Fileinput />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  export default Fileinput;","import React from 'react';\nimport './App.css';\nimport About from './About';\nimport Nav from \"./Nav\";\nimport Creative from \"./Creative\";\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom';\nimport MyForm from \"./MyForm\";\nimport Tempcond from \"./Tempcond\";\nimport Screen from \"./screen\";\nimport './App.css';  \nimport Header from './backGround';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from './Form';\nimport Fileinput from './Fileinput';\n\n\nconst animatedComponents = makeAnimated();\n\nconst Weathers = [\n  { label: \"Sunny\", value: 355 },\n  { label: \"Intermittent Clouds\", value: 54 },\n  { label: \"Cloudy\", value: 43 },\n  { label: \"Fog\", value: 61 },\n  { label: \"Showers\", value: 965 },\n  { label: \"T-Storms\", value: 46 },\n  { label: \"Rain\", value: 4 },\n  { label: \"Snow\", value: 22 },\n  { label: \"Ice\", value: 65 },\n  { label: \"Clear\", value: 123 },\n  { label: \"Windy\", value: 22 }\n];\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n\n<Nav />\n<Screen/>\n<MyForm />\n<Tempcond />\n<Route path=\"/about\" component={About}/>\n<Route path=\"/creative\" component={Creative}/>\n<Header/>\n\n\n\n\n<div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-3\"></div>\n          <div className=\"col-md-6\">\n            <Select options={Weathers} components={animatedComponents}\n              isMulti />\n          </div>\n          \n          <div className=\"col-md-4\"></div>\n        </div>\n      </div>\n    </div>\n    <Fileinput/>\n    <Form/>\n   \n    </Router>\n    \n    \n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/firewall.c016fd8d.jpg\";"],"sourceRoot":""}